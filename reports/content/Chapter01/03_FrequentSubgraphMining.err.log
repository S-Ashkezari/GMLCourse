Traceback (most recent call last):
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\asyncio\base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from gspan_mining.gspan import gSpan

# Run gSpan on file
gspan_obj = gSpan("graph.data",
                  min_support=1,
                  min_num_vertices=2,
                  max_num_vertices=3,
                  verbose=True)
gspan_obj.run()

# Access discovered patterns via the _report_df attribute
# _report_df.columns might be: ['graph_id', 'pattern', 'support', ...]
print(gspan_obj._report_df)

------------------

----- stdout -----
is_min: checking [(frm=0, to=1, vevlb=('A', 'a', 'B'))]
t # 0
v 0 A
v 1 B
e 0 1 a

Support: 2
------------------

[31m---------------------------------------------------------------------------[39m
[31mAttributeError[39m                            Traceback (most recent call last)
[32m~\AppData\Local\Temp\ipykernel_15120\4238357417.py[39m in [36m?[39m[34m()[39m
[32m      5[39m                   min_support=[32m1[39m,
[32m      6[39m                   min_num_vertices=[32m2[39m,
[32m      7[39m                   max_num_vertices=[32m3[39m,
[32m      8[39m                   verbose=[38;5;28;01mTrue[39;00m)
[32m----> [39m[32m9[39m gspan_obj.run()
[32m     10[39m 
[32m     11[39m [38;5;66;03m# Access discovered patterns via the _report_df attribute[39;00m
[32m     12[39m [38;5;66;03m# _report_df.columns might be: ['graph_id', 'pattern', 'support', ...][39;00m

[32m~\AppData\Local\Programs\Python\Python313\Lib\site-packages\gspan_mining\gspan.py[39m in [36m?[39m[34m(self)[39m
[32m     22[39m     [38;5;28;01mdef[39;00m deco(self):
[32m     23[39m         self.timestamps[func.__name__ + [33m'_in'[39m] = time.time()
[32m---> [39m[32m24[39m         func(self)
[32m     25[39m         self.timestamps[func.__name__ + [33m'_out'[39m] = time.time()

[32m~\AppData\Local\Programs\Python\Python313\Lib\site-packages\gspan_mining\gspan.py[39m in [36m?[39m[34m(self)[39m
[32m    311[39m                     )
[32m    312[39m 
[32m    313[39m         [38;5;28;01mfor[39;00m vevlb, projected [38;5;28;01min[39;00m root.items():
[32m    314[39m             self._DFScode.append(DFSedge([32m0[39m, [32m1[39m, vevlb))
[32m--> [39m[32m315[39m             self._subgraph_mining(projected)
[32m    316[39m             self._DFScode.pop()

[32m~\AppData\Local\Programs\Python\Python313\Lib\site-packages\gspan_mining\gspan.py[39m in [36m?[39m[34m(self, projected)[39m
[32m    509[39m         [38;5;28;01mif[39;00m self._support < self._min_support:
[32m    510[39m             [38;5;28;01mreturn[39;00m
[32m    511[39m         [38;5;28;01mif[39;00m [38;5;28;01mnot[39;00m self._is_min():
[32m    512[39m             [38;5;28;01mreturn[39;00m
[32m--> [39m[32m513[39m         self._report(projected)
[32m    514[39m 
[32m    515[39m         num_vertices = self._DFScode.get_num_vertices()
[32m    516[39m         self._DFScode.build_rmpath()

[32m~\AppData\Local\Programs\Python\Python313\Lib\site-packages\gspan_mining\gspan.py[39m in [36m?[39m[34m(self, projected)[39m
[32m    332[39m         display_str = g.display()
[32m    333[39m         print([33m'\nSupport: {}'[39m.format(self._support))
[32m    334[39m 
[32m    335[39m         [38;5;66;03m# Add some report info to pandas dataframe "self._report_df".[39;00m
[32m--> [39m[32m336[39m         self._report_df = self._report_df.append(
[32m    337[39m             pd.DataFrame(
[32m    338[39m                 {
[32m    339[39m                     [33m'support'[39m: [self._support],

[32m~\AppData\Local\Programs\Python\Python313\Lib\site-packages\pandas\core\generic.py[39m in [36m?[39m[34m(self, name)[39m
[32m   6295[39m             [38;5;28;01mand[39;00m name [38;5;28;01mnot[39;00m [38;5;28;01min[39;00m self._accessors
[32m   6296[39m             [38;5;28;01mand[39;00m self._info_axis._can_hold_identifiers_and_holds_name(name)
[32m   6297[39m         ):
[32m   6298[39m             [38;5;28;01mreturn[39;00m self[name]
[32m-> [39m[32m6299[39m         [38;5;28;01mreturn[39;00m object.__getattribute__(self, name)

[31mAttributeError[39m: 'DataFrame' object has no attribute 'append'


Traceback (most recent call last):
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\asyncio\base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\sashk\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# --- Graph Model Generators ---

def generate_erdos_renyi(n, p, seed=None):
    return nx.erdos_renyi_graph(n, p, seed=seed)

def generate_watts_strogatz(n, k, p_rewire, seed=None):
    return nx.watts_strogatz_graph(n, k, p_rewire, seed=seed)

def generate_barabasi_albert(n, m, seed=None):
    return nx.barabasi_albert_graph(n, m, seed=seed)

def generate_stochastic_block_model(sizes, p_matrix, seed=None):
    """
    Generates a Stochastic Block Model (SBM) graph.
    
    Parameters:
    - sizes: list of integers, number of nodes in each community
    - p_matrix: k x k matrix of connection probabilities between communities
    """
    return nx.stochastic_block_model(sizes, p_matrix, seed=seed)


# --- Main Demo Function ---

def demo(n=500, er_p=0.02, ws_k=6, ws_p=0.05, ba_m=3,
         sbm_sizes=[250, 250], sbm_p_in=0.08, sbm_p_out=0.01,
         seed=42):
    np.random.seed(seed)

    # Generate graphs
    G_er = generate_erdos_renyi(n, er_p, seed=seed)
    G_ws = generate_watts_strogatz(n, ws_k, ws_p, seed=seed)
    G_ba = generate_barabasi_albert(n, ba_m, seed=seed)

    # SBM probability matrix
    k = len(sbm_sizes)
    p_matrix = [[sbm_p_in if i==j else sbm_p_out for j in range(k)] for i in range(k)]
    G_sbm = generate_stochastic_block_model(sbm_sizes, p_matrix, seed=seed)

    fig, axes = plt.subplots(4, 3, figsize=(18, 20))  # 4 models now

    graph_data = [
        ("ErdÅ‘sâ€“RÃ©nyi (Random Graph)", G_er),
        ("Wattsâ€“Strogatz (Small-world)", G_ws),
        ("BarabÃ¡siâ€“Albert (Scale-free)", G_ba),
        ("Stochastic Block Model (SBM)", G_sbm)
    ]

    print("\n--- Network Models Summary ---\n")

    for i, (name, G) in enumerate(graph_data):
        plot_graph(G, title=name, ax=axes[i, 0])
        plot_degree_distribution(G, ax_linear=axes[i, 1], ax_log=axes[i, 2], title=name)

        stats = graph_summary_stats(G)
        degs = degree_distribution(G)
        gamma_hat, k_min, tail_size = estimate_power_law_exponent(degs, k_min=2)

        print(f"{name}:")
        for key, val in stats.items():
            print(f"  {key:25}: {val:.4f}" if isinstance(val, float) else f"  {key:25}: {val}")
        print(f"  Estimated power-law exponent (gamma) from tail: {gamma_hat:.4f} (k_min={k_min}, tail size={tail_size})\n")

    plt.tight_layout()
    plt.show()


# --- Run demo when executed as script ---
if __name__ == "__main__":
    demo()

------------------

----- stdout -----

--- Network Models Summary ---
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
Cell [1;32mIn[4], line 70[0m
[0;32m     68[0m [38;5;66;03m# --- Run demo when executed as script ---[39;00m
[0;32m     69[0m [38;5;28;01mif[39;00m [38;5;18m__name__[39m [38;5;241m==[39m [38;5;124m"[39m[38;5;124m__main__[39m[38;5;124m"[39m:
[1;32m---> 70[0m     [43mdemo[49m[43m([49m[43m)[49m

Cell [1;32mIn[4], line 52[0m, in [0;36mdemo[1;34m(n, er_p, ws_k, ws_p, ba_m, sbm_sizes, sbm_p_in, sbm_p_out, seed)[0m
[0;32m     49[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m--- Network Models Summary ---[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m)
[0;32m     51[0m [38;5;28;01mfor[39;00m i, (name, G) [38;5;129;01min[39;00m [38;5;28menumerate[39m(graph_data):
[1;32m---> 52[0m     [43mplot_graph[49m(G, title[38;5;241m=[39mname, ax[38;5;241m=[39maxes[i, [38;5;241m0[39m])
[0;32m     53[0m     plot_degree_distribution(G, ax_linear[38;5;241m=[39maxes[i, [38;5;241m1[39m], ax_log[38;5;241m=[39maxes[i, [38;5;241m2[39m], title[38;5;241m=[39mname)
[0;32m     55[0m     stats [38;5;241m=[39m graph_summary_stats(G)

[1;31mNameError[0m: name 'plot_graph' is not defined

